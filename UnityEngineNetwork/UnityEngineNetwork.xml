<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityEngineNetwork</name>
    </assembly>
    <members>
        <member name="P:UnityEngineNetwork.Client.BaseClientNetworkManager.ClientInstance">
            <summary>The client singleton</summary>
        </member>
        <member name="M:UnityEngineNetwork.Client.BaseClientNetworkManager.InitPacketHandlers">
            <summary>Initilizes all packet handlers.</summary>
        </member>
        <member name="T:UnityEngineNetwork.Client.BaseServerRepository">
            <summary>Repository for all communication between client and server</summary>
        </member>
        <member name="E:UnityEngineNetwork.Client.BaseServerRepository.OnWelcomeReceived">
            <summary>Gets called when the client receives the welcome message from the server.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Client.BaseServerRepository.SendTCPData(UnityEngineNetwork.Packet)">
            <summary>Sends the specified packet to the Server using TCP.</summary>
            <param name="packet">The packet</param>
        </member>
        <member name="M:UnityEngineNetwork.Client.BaseServerRepository.SendUDPData(UnityEngineNetwork.Packet)">
            <summary>Sends the specified packet to the Server using UDP.</summary>
            <param name="packet">The packet</param>
        </member>
        <member name="M:UnityEngineNetwork.Client.BaseServerRepository.HandleWelcome(UnityEngineNetwork.Packet)">
            <summary>Handles the welcome message from the server.</summary>
            <param name="packet">the packet</param>
        </member>
        <member name="M:UnityEngineNetwork.Client.BaseServerRepository.SendWelcomeReceived">
            <summary>Sends a packet to the server containing the username.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:UnityEngineNetwork.Client.Client" -->
        <member name="M:UnityEngineNetwork.Client.Client.ExecuteOnMainThread(System.Action)">
            <summary>Sets an action to be executed on the main thread.</summary>
            <param name="action">The action to be executed on the main thread.</param>
        </member>
        <member name="M:UnityEngineNetwork.Client.Client.UpdateMain">
            <summary>Executes all code meant to run on the main thread. NOTE: Call this ONLY from the main thread.</summary>
        </member>
        <member name="T:UnityEngineNetwork.Client.IClient">
            <summary>The interface for the client singleton. You should never access it directly.</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.ServerRepository">
            <summary>Repository for all communication between client and server</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.Id">
            <summary>The Player id. can be used to determine which player number the current client is.</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.ServerIpAddress">
            <summary>The server ip address</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.Port">
            <summary>The server port</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.Username">
            <summary>The username</summary>
        </member>
        <member name="P:UnityEngineNetwork.Client.IClient.IsConnected">
            <summary>Indicates whether the client is connected or not.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Client.IClient.ConnectToServer(UnityEngineNetwork.Client.BaseServerRepository,System.String,System.String,System.Int32)">
            <summary>Connects to the specified Server.</summary>
            <param name="ipAddress">The IP address of the server.</param>
            <param name="port">The port of the server.</param>
            <param name="username">The username of this client</param>
            <param name="serverRepository">The server repository</param>
            <exception cref="T:UnityEngineNetwork.ConnectionFailedException">Gets called if the connection fails.</exception>
        </member>
        <member name="M:UnityEngineNetwork.Client.IClient.AddPacketHandler(System.Int32,UnityEngineNetwork.Client.Client.PacketHandler)">
            <summary>Adds a packet handler. The packet handler is used to handle incomming packets from the server. 
            The id cannot be 0, because 0 is already used to send username and client id..</summary>
            <param name="id">The id of the packet handler. This id must match with the sender packet id of the server.</param>
            <param name="handler">The handler method</param>
            <exception cref="T:System.ArgumentException">Is thrown when the id is below 1</exception>
        </member>
        <member name="M:UnityEngineNetwork.Client.IClient.Disconnect">
            <summary>Disconnects all connections.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Client.IClient.UpdateMain">
            <summary>Call this method inside of Unitys Update() method.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Client.IClient.OnDisconnect">
            <summary>Gets called when the client disconnects all connections.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Client.IClient.OnConnect">
            <summary>Gets called when the client is connected to the server.</summary>
        </member>
        <member name="F:UnityEngineNetwork.Constants.DataBufferSize">
            <summary>The DataBufferSize.</summary>
        </member>
        <member name="F:UnityEngineNetwork.Constants.DefaultPort">
            <summary>The default port. You probably want to use your own.</summary>
        </member>
        <member name="F:UnityEngineNetwork.Constants.LocalHost">
            <summary>The localhost ip address</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.#ctor">
            <summary>Creates a new empty packet (without an ID).</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.#ctor(System.Int32)">
            <summary>Creates a new packet with a given ID. Used for sending.</summary>
            <param name="id">The packet ID.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.#ctor(System.Byte[])">
            <summary>Creates a packet from which data can be read. Used for receiving.</summary>
            <param name="data">The bytes to add to the packet.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.SetBytes(System.Byte[])">
            <summary>Sets the packet's content and prepares it to be read.</summary>
            <param name="data">The bytes to add to the packet.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.WriteLength">
            <summary>Inserts the length of the packet's content at the start of the buffer.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.InsertInt(System.Int32)">
            <summary>Inserts the given int at the start of the buffer.</summary>
            <param name="value">The int to insert.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ToArray">
            <summary>Gets the packet's content in array form.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Length">
            <summary>Gets the length of the packet's content.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.UnreadLength">
            <summary>Gets the length of the unread data contained in the packet.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Reset(System.Boolean)">
            <summary>Resets the packet instance to allow it to be reused.</summary>
            <param name="shouldReset">Whether or not to reset the packet.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Byte)">
            <summary>Adds a byte to the packet.</summary>
            <param name="value">The byte to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Byte[])">
            <summary>Adds an array of bytes to the packet.</summary>
            <param name="value">The byte array to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Int16)">
            <summary>Adds a short to the packet.</summary>
            <param name="value">The short to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Int32)">
            <summary>Adds an int to the packet.</summary>
            <param name="value">The int to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Int64)">
            <summary>Adds a long to the packet.</summary>
            <param name="value">The long to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Single)">
            <summary>Adds a float to the packet.</summary>
            <param name="value">The float to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Boolean)">
            <summary>Adds a bool to the packet.</summary>
            <param name="value">The bool to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.String)">
            <summary>Adds a string to the packet.</summary>
            <param name="value">The string to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Numerics.Vector3)">
            <summary>Adds a vector3 to the packet.</summary>
            <param name="value">The string to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.Write(System.Numerics.Quaternion)">
            <summary>Adds a quaternion to the packet.</summary>
            <param name="value">The string to add.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadByte(System.Boolean)">
            <summary>Reads a byte from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadBytes(System.Int32,System.Boolean)">
            <summary>Reads an array of bytes from the packet.</summary>
            <param name="length">The length of the byte array.</param>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadShort(System.Boolean)">
            <summary>Reads a short from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadInt(System.Boolean)">
            <summary>Reads an int from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadLong(System.Boolean)">
            <summary>Reads a long from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadFloat(System.Boolean)">
            <summary>Reads a float from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadBool(System.Boolean)">
            <summary>Reads a bool from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadString(System.Boolean)">
            <summary>Reads a string from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadVector3(System.Boolean)">
            <summary>Reads a vector3 from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="M:UnityEngineNetwork.Packet.ReadQuaternion(System.Boolean)">
            <summary>Reads a quaternion from the packet.</summary>
            <param name="moveReadPos">Whether or not to move the buffer's read position.</param>
        </member>
        <member name="P:UnityEngineNetwork.Server.BaseServerNetworkManager.ServerInstance">
            <summary>The server singleton</summary>
        </member>
        <member name="M:UnityEngineNetwork.Server.BaseServerNetworkManager.InitPacketHandlers">
            <summary>Initilizes all packet handlers.</summary>
        </member>
        <member name="T:UnityEngineNetwork.Server.IServer">
            <summary>The interface for the server singleton. You should never access it directly</summary>
        </member>
        <member name="P:UnityEngineNetwork.Server.IServer.ClientRepository">
            <summary>The repository for managing all request from and to the clients.</summary>
        </member>
        <member name="P:UnityEngineNetwork.Server.IServer.Clients">
            <summary>All available clients. To get all connected clients, call <see cref="P:UnityEngineNetwork.Server.Client.IsConnected"/></summary>
        </member>
        <member name="P:UnityEngineNetwork.Server.IServer.MaxClients">
            <summary>The maximum number of clients allowed.</summary>
        </member>
        <member name="P:UnityEngineNetwork.Server.IServer.Port">
            <summary>The port of the server.</summary>
        </member>
        <member name="P:UnityEngineNetwork.Server.IServer.IsRunning">
            <summary>Indicates whether the server is runnign or not.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.Start(UnityEngineNetwork.Server.BaseClientRepository,System.Int32,System.Int32)">
            <summary>Starts the server.</summary>
            <param name="clientRepository">The client repository</param>
            <param name="maxClients">The maximum nuber of players</param>
            <param name="port">The port of the server.</param>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.Stop">
            <summary>Stops the server.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.AddPacketHandler(System.Int32,UnityEngineNetwork.Server.Server.PacketHandler)">
            <summary>Adds a packet handler. The packet handler is used to handle incomming packets from the clients. 
            The id cannot be 0, because 0 is already used to send client id..</summary>
            <param name="id">The id of the packet handler. This id must match with the sender packet id of the clients.</param>
            <param name="handler">The handler method</param>
            <exception cref="T:System.ArgumentException">Is thrown when the id is below 1</exception>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.GetRandomClientId(System.Boolean)">
            <summary>Gets a random ClientId</summary>
            <param name="hasToBeConnected">Indicates whether the client has to be connected or not.</param>
            <returns>the client id.</returns>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.FilterOutBlockedStrings(System.String,System.Char)">
            <summary>Filters out any blocked string.</summary>
            <param name="message">the message to filter</param>
            <param name="replacementChar">the character to replace the blocked string.</param>
            <returns>The filtered string</returns>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.AddStringToBlock(System.String)">
            <summary>Adds a blocked string, so the <see cref="M:UnityEngineNetwork.Server.IServer.FilterOutBlockedStrings(System.String,System.Char)"/> Method can filter it out.</summary>
            <param name="stringToBlock">The string to block.</param>
        </member>
        <member name="M:UnityEngineNetwork.Server.IServer.UpdateMain">
            <summary>Call this method inside of Unitys Update() method.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Server.IServer.OnClientConnected">
            <summary>Gets called when a Client connects to the server.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Server.IServer.OnClientDisconnected">
            <summary>Gets called when a Client disconnects from the server.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Server.IServer.OnServerStarted">
            <summary>Gets called when the server starts.</summary>
        </member>
        <member name="E:UnityEngineNetwork.Server.IServer.OnServerStopped">
            <summary>Gets called when the server stops.</summary>
        </member>
        <member name="M:UnityEngineNetwork.Server.Server.ExecuteOnMainThread(System.Action)">
            <summary>Sets an action to be executed on the main thread.</summary>
            <param name="action">The action to be executed on the main thread.</param>
        </member>
        <member name="M:UnityEngineNetwork.Server.Server.UpdateMain">
            <summary>Executes all code meant to run on the main thread. NOTE: Call this ONLY from the main thread.</summary>
        </member>
    </members>
</doc>
